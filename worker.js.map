{
  "version": 3,
  "sources": ["../src/helpers/fs.ts", "../src/worker.ts"],
  "sourcesContent": ["// Credits: https://github.com/esbuild/esbuild.github.io/blob/main/src/try/fs.ts\n// This file contains a hack to get the \"esbuild-wasm\" package to run in the\n// browser with file system support. Although there is no API for this, it\n// can be made to work anyway by pretending that node's \"fs\" API is present.\n\nconst enum Kind {\n  File,\n  Directory,\n}\n\nconst enum StatsMode {\n  IFREG = 0o100000,\n  IFDIR = 0o40000,\n}\n\ntype Entry = File | Directory\n\ninterface Metadata {\n  inode_: number\n  ctime_: Date\n  mtime_: Date\n}\n\ninterface File extends Metadata {\n  kind_: Kind.File\n  content_: Uint8Array\n}\n\ninterface Directory extends Metadata {\n  kind_: Kind.Directory\n  children_: Map<string, Entry>\n}\n\nclass Stats {\n  declare dev: number\n  declare ino: number\n  declare mode: number\n  declare nlink: number\n  declare uid: number\n  declare gid: number\n  declare rdev: number\n  declare size: number\n  declare blksize: number\n  declare blocks: number\n  declare atimeMs: number\n  declare mtimeMs: number\n  declare ctimeMs: number\n  declare birthtimeMs: number\n  declare atime: Date\n  declare mtime: Date\n  declare ctime: Date\n  declare birthtime: Date\n\n  constructor(entry: Entry) {\n    const blksize = 4096\n    const size = entry.kind_ === Kind.File ? entry.content_.length : 0\n    const mtimeMs = entry.mtime_.getTime()\n    const ctimeMs = entry.ctime_.getTime()\n    this.dev = 1\n    this.ino = entry.inode_\n    this.mode = entry.kind_ === Kind.File ? StatsMode.IFREG : StatsMode.IFDIR\n    this.nlink = 1\n    this.uid = 1\n    this.gid = 1\n    this.rdev = 0\n    this.size = size\n    this.blksize = blksize\n    this.blocks = (size + (blksize - 1)) & (blksize - 1)\n    this.atimeMs = mtimeMs\n    this.mtimeMs = mtimeMs\n    this.ctimeMs = ctimeMs\n    this.birthtimeMs = ctimeMs\n    this.atime = entry.mtime_\n    this.mtime = entry.mtime_\n    this.ctime = entry.ctime_\n    this.birthtime = entry.ctime_\n  }\n\n  isDirectory(): boolean {\n    return this.mode === StatsMode.IFDIR\n  }\n\n  isFile(): boolean {\n    return this.mode === StatsMode.IFREG\n  }\n}\n\ninterface Handle {\n  entry_: Entry\n  offset_: number\n}\n\nconst EBADF = errorWithCode('EBADF')\nconst EINVAL = errorWithCode('EINVAL')\nconst EISDIR = errorWithCode('EISDIR')\nconst ENOENT = errorWithCode('ENOENT')\nconst ENOTDIR = errorWithCode('ENOTDIR')\nconst handles = new Map<number, Handle>()\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\nconst root: Directory = createDirectory()\nlet nextFD = 3\nlet nextInode = 1\nexport let stderrSinceReset = ''\n\n// The \"esbuild-wasm\" package overwrites \"fs.writeSync\" with this value\nlet esbuildWriteSync: (\n  fd: number,\n  buffer: Uint8Array,\n  offset: number,\n  length: number,\n  position: number | null,\n) => void\n\n// The \"esbuild-wasm\" package overwrites \"fs.read\" with this value\nlet esbuildRead: (\n  fd: number,\n  buffer: Uint8Array,\n  offset: number,\n  length: number,\n  position: number | null,\n  callback: (err: Error | null, count: number, buffer: Uint8Array) => void,\n) => void\n\nfunction writeSync(\n  fd: number,\n  buffer: Uint8Array,\n  offset: number,\n  length: number,\n  position: number | null,\n): void {\n  if (fd <= 2) {\n    if (fd === 2) writeToStderr(buffer, offset, length)\n    else esbuildWriteSync(fd, buffer, offset, length, position)\n  } else {\n    throw EINVAL\n  }\n}\n\nfunction read(\n  fd: number,\n  buffer: Uint8Array,\n  offset: number,\n  length: number,\n  position: number | null,\n  callback: (err: Error | null, count: number, buffer: Uint8Array) => void,\n): void {\n  if (fd <= 2) {\n    esbuildRead(fd, buffer, offset, length, position, callback)\n  } else {\n    const handle = handles.get(fd)\n    if (!handle) {\n      callback(EBADF, 0, buffer)\n    } else if (handle.entry_.kind_ === Kind.Directory) {\n      callback(EISDIR, 0, buffer)\n    } else {\n      const content = handle.entry_.content_\n      if (position !== null && position !== -1) {\n        const slice = content.slice(position, position + length)\n        buffer.set(slice, offset)\n        callback(null, slice.length, buffer)\n      } else {\n        const slice = content.slice(handle.offset_, handle.offset_ + length)\n        handle.offset_ += slice.length\n        buffer.set(slice, offset)\n        callback(null, slice.length, buffer)\n      }\n    }\n  }\n}\n\nfunction rejectConflict(part: string): never {\n  throw new Error(JSON.stringify(part) + ' cannot be both a file and a directory')\n}\n\nexport function resetFileSystem(files: Record<string, string>): void {\n  root.children_.clear()\n  stderrSinceReset = ''\n\n  for (const path in files) {\n    const parts = splitPath(absoluteNormalizedPath(path))\n    let dir = root\n\n    for (let i = 0; i + 1 < parts.length; i++) {\n      const part = parts[i]\n      let child = dir.children_.get(part)\n      if (!child) {\n        child = createDirectory()\n        dir.children_.set(part, child)\n      } else if (child.kind_ !== Kind.Directory) {\n        rejectConflict(part)\n      }\n      dir = child\n    }\n\n    const part = parts[parts.length - 1]\n    if (dir.children_.has(part)) rejectConflict(part)\n    dir.children_.set(part, createFile(encoder.encode(files[path])))\n  }\n}\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var fs: unknown\n}\n\n// Override the same variable in the \"esbuild-wasm\" package\nglobalThis.fs = {\n  get writeSync() {\n    return writeSync\n  },\n  set writeSync(value) {\n    esbuildWriteSync = value\n  },\n\n  get read() {\n    return read\n  },\n  set read(value) {\n    esbuildRead = value\n  },\n\n  constants: {\n    O_WRONLY: -1,\n    O_RDWR: -1,\n    O_CREAT: -1,\n    O_TRUNC: -1,\n    O_APPEND: -1,\n    O_EXCL: -1,\n  },\n\n  open(\n    path: string,\n    flags: string | number,\n    mode: string | number,\n    callback: (err: Error | null, fd: number | null) => void,\n  ) {\n    try {\n      const entry = getEntryFromPath(path)\n      const fd = nextFD++\n      handles.set(fd, { entry_: entry, offset_: 0 })\n      callback(null, fd)\n    } catch (err) {\n      callback(err, null)\n    }\n  },\n\n  close(fd: number, callback: (err: Error | null) => void) {\n    callback(handles.delete(fd) ? null : EBADF)\n  },\n\n  write(\n    fd: number,\n    buffer: Uint8Array,\n    offset: number,\n    length: number,\n    position: number | null,\n    callback: (err: Error | null, count: number, buffer: Uint8Array) => void,\n  ) {\n    if (fd <= 2) {\n      if (fd === 2) writeToStderr(buffer, offset, length)\n      else esbuildWriteSync(fd, buffer, offset, length, position)\n      callback(null, length, buffer)\n    } else {\n      callback(EINVAL, 0, buffer)\n    }\n  },\n\n  readdir(path: string, callback: (err: Error | null, files: string[] | null) => void) {\n    try {\n      const entry = getEntryFromPath(path)\n      if (entry.kind_ !== Kind.Directory) throw ENOTDIR\n      callback(null, [...entry.children_.keys()])\n    } catch (err) {\n      callback(err, null)\n    }\n  },\n\n  stat(path: string, callback: (err: Error | null, stats: Stats | null) => void) {\n    try {\n      const entry = getEntryFromPath(path)\n      callback(null, new Stats(entry))\n    } catch (err) {\n      callback(err, null)\n    }\n  },\n\n  lstat(path: string, callback: (err: Error | null, stats: Stats | null) => void) {\n    try {\n      const entry = getEntryFromPath(path)\n      callback(null, new Stats(entry))\n    } catch (err) {\n      callback(err, null)\n    }\n  },\n\n  fstat(fd: number, callback: (err: Error | null, stats: Stats | null) => void) {\n    const handle = handles.get(fd)\n    if (handle) {\n      callback(null, new Stats(handle.entry_))\n    } else {\n      callback(EBADF, null)\n    }\n  },\n}\n\nfunction createFile(content: Uint8Array): File {\n  const now = new Date()\n  return {\n    kind_: Kind.File,\n    inode_: nextInode++,\n    ctime_: now,\n    mtime_: now,\n    content_: content,\n  }\n}\n\nfunction createDirectory(): Directory {\n  const now = new Date()\n  return {\n    kind_: Kind.Directory,\n    inode_: nextInode++,\n    ctime_: now,\n    mtime_: now,\n    children_: new Map(),\n  }\n}\n\nfunction absoluteNormalizedPath(path: string): string {\n  if (path[0] !== '/') path = '/' + path\n  const parts = path.split('/')\n  parts.shift()\n  let end = 0\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i]\n    if (part === '..') {\n      if (end) end--\n    } else if (part !== '.' && part !== '') {\n      parts[end++] = part\n    }\n  }\n  parts.length = end\n  return '/' + parts.join('/')\n}\n\nfunction splitPath(path: string): string[] {\n  path = absoluteNormalizedPath(path)\n  if (path === '/') return []\n  const parts = path.split('/')\n  parts.shift()\n  return parts\n}\n\nfunction getEntryFromPath(path: string): Entry {\n  const parts = splitPath(path)\n  let dir = root\n  for (let i = 0, n = parts.length; i < n; i++) {\n    const child = dir.children_.get(parts[i])\n    if (!child) throw ENOENT\n    if (child.kind_ === Kind.File) {\n      if (i + 1 === n) return child\n      throw ENOTDIR\n    }\n    dir = child\n  }\n  return dir\n}\n\nfunction errorWithCode(code: string): Error {\n  const err = new Error(code) as any\n  err.code = code\n  return err\n}\n\nfunction writeToStderr(buffer: Uint8Array, offset: number, length: number): void {\n  stderrSinceReset += decoder.decode(\n    offset === 0 && length === buffer.length ? buffer : buffer.slice(offset, offset + length),\n  )\n}\n", "// Credits: https://github.com/esbuild/esbuild.github.io/blob/main/src/try/worker.ts\n// Note: to make this file work in a normal web worker, it should not have\n// any common dependencies, './helpers/fs' is only imported here so it is ok.\n\n/* eslint-disable no-control-regex */\n// This file is responsible for spawning and terminating child worker threads.\n// The worker thread is recreated every time the current API version changes.\n// This file is the entry point for the child web worker\n\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"DOM\" />\n/// <reference lib=\"ESNext\" />\n\ndeclare const esbuild: any\n\nimport { resetFileSystem, stderrSinceReset } from './helpers/fs'\nimport { IPCRequest, IPCResponse } from './ipc'\n\ninterface API {\n  transform(input: string, options: any): Promise<any>\n  build(options: any): Promise<any>\n\n  // This was added in version 0.10.1\n  formatMessages?(messages: Message[], options: FormatMessagesOptions): Promise<any>\n}\n\ninterface FormatMessagesOptions {\n  kind: 'error' | 'warning'\n  color?: boolean\n  terminalWidth?: number\n}\n\ninterface Message {\n  text: string\n  location: Location | null\n  notes?: Note[]\n}\n\ninterface Note {\n  text: string\n  location: Location | null\n}\n\ninterface Location {\n  file: string\n  line: number\n  column: number\n  length: number\n  lineText: string\n  suggestion?: string\n}\n\n// Do the setup in an async function to capture errors thrown (e.g. \"WebAssembly\" doesn't exist)\nconst setup = async ([version, wasm]: [string, ArrayBuffer]): Promise<API> => {\n  const [major, minor, patch] = version.split('.').map((x) => +x)\n\n  // Versions 0.5.20 to 0.8.34 have a bug where \"worker\" doesn't work. This\n  // means that the \"build\" API is broken (because we can't inject our file\n  // system shim) but the \"transform\" API still works, so we still allow\n  // these buggy versions.\n  const hasBugWithWorker =\n    major === 0 &&\n    ((minor === 5 && patch >= 20) || (minor >= 6 && minor <= 7) || (minor === 8 && patch <= 34))\n\n  const options: Record<string, any> = {\n    // This uses \"wasmURL\" instead of \"wasmModule\" because \"wasmModule\" was added in version 0.14.32\n    wasmURL: URL.createObjectURL(new Blob([wasm], { type: 'application/wasm' })),\n  }\n\n  // Avoid triggering an esbuild bug that causes all output to be empty\n  if (!hasBugWithWorker) {\n    options.worker = false\n  }\n\n  // Use the \"startService\" API before version 0.9.0\n  if (esbuild.startService) {\n    await esbuild.startService(options)\n  } else {\n    // Otherwise use the \"initialize\" API\n    await esbuild.initialize(options)\n  }\n\n  // Warm up\n  await esbuild.transform('let a = 1').catch(() => void 0)\n\n  return esbuild\n}\n\nconst perf: { now(): number } = typeof performance !== 'undefined' ? performance : Date\n\nconst formatMessages = (api: API, messages: Message[], options: FormatMessagesOptions): Promise<string[]> => {\n  if (api.formatMessages) return api.formatMessages(messages, options)\n\n  // Do something reasonable for version 0.10.0 and earlier\n  // cspell: disable\n  const format = (kind: string, text: string, location: Location | null): string => {\n    let result = kind === 'note' ? '   ' : '\\x1B[1m > '\n    if (location) result += `${location.file}:${location.line}:${location.column}: `\n    result +=\n      kind === 'error'\n        ? '\\x1B[31merror:\\x1B[1m '\n        : kind === 'warning'\n        ? '\\x1B[35mwarning:\\x1B[1m '\n        : '\\x1B[1mnote:\\x1B[0m '\n    result += text + '\\x1B[0m\\n'\n    if (location) {\n      const { line, column, length, lineText } = location\n      const prefix = line.toString().padStart(5)\n      result +=\n        `\\x1B[37m${prefix} \u2502 ${lineText.slice(0, column)}` +\n        `\\x1B[32m${lineText.slice(column, column + length)}` +\n        `\\x1B[37m${lineText.slice(column + length)}\\n` +\n        `${' '.repeat(prefix.length)} \u2575 \\x1B[32m${' '.repeat(column)}${\n          length > 1 ? '~'.repeat(length) : '^'\n        }\\x1B[0m\\n`\n    }\n    return result\n  }\n  // cspell: enable\n  return Promise.resolve(\n    messages.map((msg) => {\n      let result = format(options.kind, msg.text, msg.location)\n      for (const note of msg.notes || []) {\n        result += format('note', note.text, note.location)\n      }\n      return result + '\\n'\n    }),\n  )\n}\n\nconst handler = function (this: API, e: MessageEvent<IPCRequest>) {\n  const respondWithError = (\n    respond: (response: IPCResponse) => void,\n    err: Error & { errors?: any[]; warnings?: any[] },\n  ): void => {\n    let errors = err && err.errors\n    const warnings = err && err.warnings\n    if (!errors && !warnings) errors = [{ text: err + '' }]\n    Promise.all([\n      errors ? formatMessages(this, errors, { kind: 'error', color }) : [],\n      warnings ? formatMessages(this, warnings, { kind: 'warning', color }) : [],\n    ]).then(([errors, warnings]) => {\n      respond({\n        stderr_: [...errors, ...warnings].join(''),\n      })\n    })\n  }\n\n  // There are two sources of log information: the log messages returned through\n  // the API and the stderr stream from WebAssembly. The returned log messages\n  // are likely colored while the stderr stream from WebAssembly likely isn't, so\n  // we prefer the messages from the API. However, don't want to omit unique\n  // information from WebAssembly such as verbose log messages. Remove duplicate\n  // log information so each message is only shown once.\n  const mergeStderrStreams = (formatted: string[], stderr: string): string => {\n    for (const text of formatted) {\n      const replaced = stderr.replace(text, '')\n      if (replaced !== stderr) {\n        // Try with escape codes\n        stderr = replaced\n      } else {\n        // Try without escape codes\n        const replaced = text.replace(/\\x1B\\[[^m]*m/g, '')\n        if (replaced !== text) {\n          stderr = stderr.replace(replaced, '')\n        }\n      }\n    }\n    return formatted.join('') + stderr\n  }\n\n  const finish = (warnings: any[], done: (stderr: string) => void): void => {\n    if (warnings.length) {\n      formatMessages(this, warnings, { kind: 'warning', color }).then((formatted) =>\n        done(mergeStderrStreams(formatted, stderrSinceReset)),\n      )\n    } else {\n      done(stderrSinceReset)\n    }\n  }\n\n  const request: IPCRequest = e.data\n  const respond: (response: IPCResponse) => void = postMessage\n  let start: number\n  let color = true\n\n  try {\n    // Transform API\n    if (request.command_ === 'transform') {\n      if (request.options_.color === false) color = false\n      resetFileSystem({})\n      start = perf.now()\n      this.transform(request.input_, request.options_).then(\n        ({ code, map, js, jsSourceMap, warnings, mangleCache, legalComments }) =>\n          finish(warnings, (stderr: string) =>\n            respond({\n              // \"code\" and \"map\" were \"js\" and \"jsSourceMap\" before version 0.8.0\n              code_: code ?? js,\n              map_: map ?? jsSourceMap,\n              mangleCache_: mangleCache,\n              legalComments_: legalComments,\n              stderr_: stderr,\n              duration_: perf.now() - start,\n            }),\n          ),\n        (err) => respondWithError(respond, err),\n      )\n    }\n\n    // Build API\n    else if (request.command_ === 'build') {\n      if (request.options_.color === false) color = false\n      resetFileSystem(request.input_)\n      start = perf.now()\n      this.build(request.options_).then(\n        ({ warnings, outputFiles, metafile, mangleCache }) =>\n          finish(warnings, (stderr: string) =>\n            respond({\n              outputFiles_: outputFiles.map(({ path, text }) => ({ path, text })),\n              metafile_: metafile,\n              mangleCache_: mangleCache,\n              stderr_: stderr,\n              duration_: perf.now() - start,\n            }),\n          ),\n        (err) => respondWithError(respond, err),\n      )\n    }\n  } catch (err) {\n    respondWithError(respond, err)\n  }\n}\n\nonmessage = async (e: MessageEvent<[string, ArrayBuffer]>) => {\n  try {\n    const api = await setup(e.data)\n    onmessage = handler.bind(api)\n    postMessage({\n      status_: 'success',\n    })\n  } catch (err) {\n    console.error(err)\n    postMessage({\n      status_: 'failure',\n      error_: err + '',\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": ["Stats", "entry", "size", "kind_", "content_", "mtimeMs", "mtime_", "ctimeMs", "ctime_", "inode_", "EBADF", "errorWithCode", "EINVAL", "EISDIR", "ENOENT", "ENOTDIR", "handles", "encoder", "decoder", "root", "createDirectory", "nextFD", "nextInode", "stderrSinceReset", "esbuildWriteSync", "esbuildRead", "writeSync", "fd", "buffer", "offset", "length", "position", "writeToStderr", "read", "callback", "handle", "entry_", "content", "slice", "offset_", "rejectConflict", "part", "resetFileSystem", "files", "children_", "path", "parts", "splitPath", "absoluteNormalizedPath", "dir", "i", "child", "createFile", "value", "flags", "mode", "getEntryFromPath", "err", "now", "end", "code", "setup", "version", "wasm", "major", "minor", "patch", "x", "hasBugWithWorker", "options", "perf", "formatMessages", "api", "messages", "format", "kind", "text", "location", "result", "line", "column", "length", "lineText", "prefix", "msg", "note", "handler", "e", "respondWithError", "respond", "err", "errors", "warnings", "color", "stderr_", "mergeStderrStreams", "formatted", "stderr", "replaced", "finish", "done", "stderrSinceReset", "request", "start", "command_", "options_", "resetFileSystem", "input_", "code", "map", "js", "jsSourceMap", "mangleCache", "legalComments", "code_", "map_", "mangleCache_", "legalComments_", "duration_", "outputFiles", "metafile", "outputFiles_", "path", "metafile_", "status_", "error_"],
  "x_google_ignoreList": []
}
